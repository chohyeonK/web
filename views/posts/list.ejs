<div class="my-5">
    <h1 class="text-center mb-5">게시판</h1>
    <div class="row">
        <div class="col">
            게시글수: <span id ="total">0</span>
        </div>
        <div class="col text-end">
            <button id="btn-insert" class="btn btn-primary">글쓰기</button>
        </div>
    </div>

    <hr />
    <div id="div_posts"></div>
    <!-- <div class="text-center">
        <buton id="prev" class="btn btn-primary btn-sm">이전</buton>
        <span id="page">0/0</span>
        <buton id="next" class="btn btn-primary btn-sm">다음</buton>
    </div> -->
    <div id="pagination" class="pagination justify-content-center mt-5"></div>
</div>

<script id="temp_posts" type="x-handlebars-template">
    <table class="table">
        {{#each .}}
            <tr>
                <td><a href="/posts/read?id={{id}}">{{title}}</a></td>
                <td>{{date}}</td>
                <td>{{email}}</td>
            </tr>    
        {{/each}}
    </table>
</script>

<script type="module">
    import { app } from "/javascripts/firebase.js";
    import { getFirestore,collection } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    import { query,orderBy,getDocs,where,doc } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    const db = getFirestore(app);
    const email=sessionStorage.getItem('email');

    let page =1;
    let size=5;
    let total=0;

    getPosts();

    $("#next").on("click", function(){
        page++;
        getPosts();
    });

    
    $("#prev").on("click", function(){
        page--;
        getPosts();
    });

    async function getPosts() {
        const q = query(collection(db, 'posts'), orderBy("date", "desc"));
        const snapshot = await getDocs(q);
        $("#total").html(`<b>${snapshot.docs.length}</b>`);
        // console.log('snapshot', snapshot.docs);

        //전체 페이지수 구하기
        if(total != snapshot.docs.length){
            total=snapshot.docs.length;
            const totalPages = Math.ceil(total/size);
            $("#pagination").twbsPagination("changeTotalPages", totalPages, 1);
        }
        
        //현재페이지 목록 출력
        let rows=[];
        snapshot.docs.forEach((doc,index) => {
            const start =(page-1)*size;
            const end =(page*size)-1;
            if(index>=start && index <=end){
                const row={index: index+1,id:doc.id, ...doc.data()}
                rows.push(row);
            }
        });
        

        const temp = Handlebars.compile($("#temp_posts").html());
        $("#div_posts").html(temp(rows));

        // console.log('page', page);

        // if(page == 1) {
        //     console.log('여기', );
        //     $("#prev").attr("disabled", true);
        // }
        // else{
        //     $("#prev").attr("disabled", false);
        // }

        // if(page == last) {
        //     $("#next").attr("disabled", true);
        // }else{
        //     $("#next").attr("disabled", false);
        // } 
    }

    $("#btn-insert").on("click", function() {
        if (sessionStorage.getItem("uid")) {
            // 로그인이 되어 있는 상태
            location.href = "/posts/insert";
        } else {
            sessionStorage.setItem("target", "/posts/insert")
            location.href = "/users/login";
        }
    });

    $('#pagination').twbsPagination({
        totalPages:10, //총 페이지 번호 수
        visiblePages: 5, // 하단에서 한 번에 보여 지는 페이지 번호 수
        startPage : 1, // 시작 시 표시되는 현재 페이지
        initiateStartPageClick: false, // 플러그인이 시작 시 페이지 버튼 클릭 여부 (default : true) 
        first : '<<', // 페이지네이션 버튼 중 처음으로 돌아가는 버튼에 쓰여 있는 텍스트
        prev : '<', // 이전 페이지 버튼에 쓰여 있는 텍스트
        next : '>', // 다음 페이지 버튼에 쓰여 있는 텍스트
        last : '>>', // 페이지네이션 버튼 중 마지막으로 가는 버튼에 쓰여 있는 텍스트
        onPageClick: function (event, clickPage) {
            page=clickPage;
            getPosts(); 
        }
    });
</script>